<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.codelinn.blog.dao.BlogDao">
    <resultMap id="resultMap" type="com.codelinn.blog.model.Blog">
    </resultMap>

    <select id="getMaxUserblogid" resultType="java.lang.Integer">
        select id
        from t_blog
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
        </where>
        order by id desc limit 1
    </select>

    <select id="getLastPageIds" resultType="java.lang.Long">
      select id from t_blog where user_id = #{userId} order by id asc limit #{pageSize}
    </select>

    <select id="searchUserBlogs" resultMap="resultMap">
        select id,user_id,title,tags,likes,done,create_time,content
        from t_blog
        where user_id=#{userId}
        <if test="word != null and word != '' ">
            and (match(title,content) against(#{word}) or title like concat('%',#{word},'%'))
        </if>
        order by create_time desc
    </select>

    <select id="getUserblogsPage" resultMap="resultMap">
        select id,
               user_id,
               title,
               tags,
               likes,
               done,
               create_time,
               content
        from t_blog
        where id <![CDATA[<=]]> #{lastId}
        <if test="userId !=null">
            and user_id = #{userId}
        </if>
        order by id desc limit #{pageSize}
    </select>

    <select id="getTags" resultType="java.lang.String">
        select distinct(tags)
        from t_blog
    </select>

    <update id="updateLikes" parameterType="java.lang.Long">
        update t_blog
        set likes = likes + 1
        where id = #{id}
    </update>
</mapper>
